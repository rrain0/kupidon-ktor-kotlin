
#user  nobody;
worker_processes  auto;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
  worker_connections  1024;
}


http {
  include       mime.types;
  default_type  application/octet-stream;

  #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
  #                  '$status $body_bytes_sent "$http_referer" '
  #                  '"$http_user_agent" "$http_x_forwarded_for"';

  #access_log  logs/access.log  main;

  sendfile        on;
  #tcp_nopush     on;

  #keepalive_timeout  0;
  keepalive_timeout  65;

  client_max_body_size 16M;

  #gzip  on;

  #    error_page  404              /404.html;

  #    # redirect server error pages to the static page /50x.html
  #
  #    error_page   500 502 503 504  /50x.html;
  #    location = /50x.html {
  #      root   html;
  #    }

  #    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
  #
  #    location ~ \.php$ {
  #      proxy_pass   http://127.0.0.1;
  #    }

  #    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
  #
  #    location ~ \.php$ {
  #      root           html;
  #      fastcgi_pass   127.0.0.1:9000;
  #      fastcgi_index  index.php;
  #      fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
  #      include        fastcgi_params;
  #    }

  #    # deny access to .htaccess files, if Apache's document root
  #    # concurs with nginx's one
  #
  #    location ~ /\.ht {
  #      deny  all;
  #    }
  #}




  ## SERVER EXAMPLE
  ## Another virtual host using mix of IP-, name-, and port-based configuration
  #server {
  #  # set which port to listen
  #  listen       8000;
  #  listen       443 ssl;
  #  listen       somename:8080;
  #
  #  # set the domain on which nginx will react
  #  server_name  somename  alias  another.alias;
  #  server_name  localhost;
  #  server_name main.com ns.main.com *.main.com;
  #
  #  location / {
  #    root   html;
  #    index  index.html index.htm;
  #  }
  #  location / {
  #    root   "D:/PROG/JavaScript/[projects]/kupidon-react-ts-pwa/build/";
  #    index  index.html index.htm;
  #  }
  #
  #  # configuring proxy: from location "..." to proxy_pass "..."
  #  location /api/ {
  #    proxy_pass http://localhost:4001/;
  #  }
  #}





  # ktor proxy
  # https://${PROXY_HOST}:${PROXY_PORT} -> ktor server http://localhost:${KTOR_PORT}
  server {
    server_name  ${PROXY_HOST};
    listen       ${PROXY_PORT} ssl;

    ssl_certificate      "/etc/ssl/cert/cert.crt";
    ssl_certificate_key  "/etc/ssl/cert/cert.key";

    ssl_session_cache    shared:SSL:1m;
    ssl_session_timeout  5m;

    ssl_ciphers  HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers  on;


    # CORS setup - variables
    set $allowHeaders 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,';
    set $allowHeaders '${allowHeaders}If-Modified-Since,Cache-Control,Content-Type,Authorization';

    location / {
      # CORS setup
      if ($request_method = 'OPTIONS') {
        add_header Access-Control-Allow-Origin $http_origin always;

        # Allow Cookies
        add_header Access-Control-Allow-Credentials 'true';
        # Allow GET POST PUT HEAD DELETE OPTIONS methods
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS, PUT, DELETE, HEAD';
        # Allow headers
        add_header Access-Control-Allow-Headers $allowHeaders;
        # Tell client that this pre-flight info is valid for 20 days
        add_header Access-Control-Max-Age 1728000;
        add_header Content-Type 'text/plain charset=UTF-8';
        add_header Content-Length 0;
        return 204;
      }


      proxy_pass http://localhost:${KTOR_PORT}/;


      # CORS setup
      proxy_set_header Origin http://localhost:${KTOR_PORT};

      proxy_hide_header Access-Control-Allow-Origin;
      add_header Access-Control-Allow-Origin $http_origin always;

      proxy_hide_header Access-Control-Allow-Credentials;
      add_header Access-Control-Allow-Credentials true always;

      proxy_hide_header Access-Control-Allow-Methods;
      add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS, PUT, DELETE, HEAD' always;

      proxy_hide_header Access-Control-Allow-Headers;
      add_header Access-Control-Allow-Headers $allowHeaders always;


      # Forward headers setup
      #proxy_set_header Host $host:$server_port;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Host $host:$server_port;
      proxy_set_header X-Forwarded-Proto: $http_x_forwarded_proto; # X-Forwarded-Protocol
      proxy_set_header X-Forwarded-SSL on;
    }
  }


}
