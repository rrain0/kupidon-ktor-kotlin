


private-conf: { include "application-private.conf" }

ktor {

  development: true
  //development: false

  development: ${?KTOR_IS_DEVELOPMENT}

  deployment {

    port: 40019 // port for development
    //port: 40041 // port for production

    port: ${?KTOR_PORT}


    //port: 4000 // default value of port
    //port: ${?PORT} // access OS User environment variable PORT if it provided
    //sslPort: 50020

    // development live reload will watch this places to update running server
    watch: [ classes, resources ] // for auto-reload
  }
  //security {
  //  ssl {
  //    keyStore: "build/resources/main/keystore.jks"
  //    keyAlias: sampleKeystoreAlias
  //    keyStorePassword: keystorePwd
  //    privateKeyPassword: keystorePwd
  //  }
  //}
  application {
    modules: [ com.rrain.kupidon.ApplicationKt.module ]
  }
}

db {
  connection {
    application-name: "kupidon"

    mongo {
      host: ${private-conf.db.connection.mongo.host}
      port: ${private-conf.db.connection.mongo.port}
      rs: ${private-conf.db.connection.mongo.rs}
      database: ${private-conf.db.connection.mongo.database}
      user: ${private-conf.db.connection.mongo.user}
      pwd: ${private-conf.db.connection.mongo.pwd}
    }

    postgres {
      host: "localhost"
      port: 5432
      user: ${private-conf.db.connection.postgres.user}
      pwd: ${private-conf.db.connection.postgres.pwd}
      database: "kupidon"
      schema: "public"
      // url: "jdbc:postgresql://localhost:5432/kupidon"
    }
  }

  user-pwd-hashing {
    // standard algorithm names: https://docs.oracle.com/en/java/javase/17/docs/specs/security/standard-names.html#securerandom-number-generation-algorithms
    algorithm: ${private-conf.db.user-pwd-hashing.algorithm}
    secret: ${private-conf.db.user-pwd-hashing.secret}
    iterations: ${private-conf.db.user-pwd-hashing.iterations}
    hash-len: ${private-conf.db.user-pwd-hashing.hash-len}
  }
  users {
    admin {
      id: ${private-conf.db.users.admin.id}
      email: ${private-conf.db.users.admin.email}
      pwd: ${private-conf.db.users.admin.pwd}
    }
  }
}

jwt {
  refresh-token {
    secret: ${private-conf.jwt.refresh-token.secret}
    // format "nd nh nm ns" "365d 7h 8m 59s" "50d" will be parsed by kotlin.time.Duration
    lifetime: 30d

    // server that issued token
    //issuer: "http://0.0.0.0:50020/"
    // what path to access
    //audience: "http://0.0.0.0:50020/api/refresh"
  }
  access-token {
    secret: ${private-conf.jwt.access-token.secret}
    lifetime: 3m

    //issuer: "http://0.0.0.0:50020/"
    //audience: "http://0.0.0.0:50020/api"

    // The realm property allows you to set the realm to be passed in the WWW-Authenticate header
    // when accessing a protected route.
    // Browser stores different credentials for different realms.
    //realm: "Access to '/api'"
  }
  email-verify-access-token {
    lifetime: 1d
  }
}

mail {
  email: ${private-conf.mail.email}
  pwd: ${private-conf.mail.pwd}
}